@page "/Iam/Users/{id}/Delete"

@using Microsoft.AspNetCore.Identity
@using IdentityManager.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>User</h4>
    <hr />
    @if (user is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@user.UserName</dd>

            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@user.Email</dd>

            <dt class="col-sm-2">Lockout enabled</dt>
            <dd class="col-sm-10 form-check form-switch">
                <InputCheckbox @bind-Value="user.LockoutEnabled" class="form-check-input" role="switch" disabled />
            </dd>

            @if (@user.LockoutEnabled)
            {
                <dt class="col-sm-2">Lockout end</dt>
                <dd class="col-sm-10">@(user.LockoutEnd.HasValue ? user.LockoutEnd.Value.Date.ToShortDateString() : "-")</dd>
            }

            <dt class="col-sm-2">Two factor enabled</dt>
            <dd class="col-sm-10 form-check form-switch">
                <InputCheckbox @bind-Value="user.TwoFactorEnabled" class="form-check-input" role="switch" disabled />
            </dd>
        </dl>

        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(user is null)">Delete</button> |
            <a href="/Iam/Users">Back to List</a>
        </EditForm>
    }
</div>

@code {
    ApplicationUser? user;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteUser()
    {
        var result = await UserManager.DeleteAsync(user);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Users");
        }
    }
}
