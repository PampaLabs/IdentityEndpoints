@page "/Iam/Roles/{id}/Edit"

@using System.ComponentModel.DataAnnotations
@using IdentityManager.Data
@using Microsoft.AspNetCore.Identity

@inject RoleManager<ApplicationRole> RoleManager
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Role</h4>
<hr />
@if (Input is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm method="post" Model="Input" OnValidSubmit="UpdateRole" FormName="edit" Enhance>
             <DataAnnotationsValidator />
             <ValidationSummary />

             <input type="hidden" name="Input.ConcurrencyStamp" value="@Input.ConcurrencyStamp" />

             <div class="form-floating mb-3">
                 <InputText id="name" @bind-Value="Input.Name" class="form-control" placeholder="Please enter the name." />
                 <label for="name" class="form-label">Name</label>
                 <ValidationMessage For="() => Input.Name" class="text-danger" />
             </div>
             <button type="submit" class="btn btn-primary">Save</button>
         </EditForm>
     </div>
 </div>
}

<div>
    <a href="/Iam/Roles">Back to List</a>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var role = await RoleManager.FindByIdAsync(Id);

        if (role is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Input = new InputModel
            {
                Name = role.Name,
                ConcurrencyStamp = role.ConcurrencyStamp,
            };
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateRole()
    {
        var role = await RoleManager.FindByIdAsync(Id);

        role.Name = Input.Name;
        role.ConcurrencyStamp = Input.ConcurrencyStamp;

        var result = await RoleManager.UpdateAsync(role);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Iam/Roles");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Name")]
        public string? Name { get; set; }

        [Required]
        [Display(Name = "Concurrency stamp")]
        public string? ConcurrencyStamp { get; set; }
    }
}
